#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

void dijkstra(vector<vector<pair<int, int>>> &graph, int source, int n) {
    vector<int> dist(n, INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;

    dist[source] = 0;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (auto &[v, weight] : graph[u]) {
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Shortest distances from source:\n";
    for (int i = 0; i < n; ++i)
        cout << "Node " << i << ": " << dist[i] << endl;
}

int main() {
    int n = 6;
    vector<vector<pair<int, int>>> graph(n);

    graph[0].push_back({1, 4});
    graph[0].push_back({2, 2});
    graph[1].push_back({2, 5});
    graph[1].push_back({3, 10});
    graph[2].push_back({4, 3});
    graph[4].push_back({3, 4});
    graph[3].push_back({5, 11});

    dijkstra(graph, 0, n);
    return 0;
}
